A functional password analyzer tool with a user-friendly 
      interface and a report explaining the algorithm and its effectiveness.

using tools like  Python,tkinter for GUI, hashlib for encryption 

import tkinter as tk
from tkinter import messagebox
import hashlib
import re

class PasswordAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Strength Analyzer")
        self.root.geometry("400x350")
        self.root.configure(bg="#f0f8ff")

        # GUI Components
        self.label = tk.Label(root, text="Enter your password:", font=("Helvetica", 12), bg="#f0f8ff")
        self.label.pack(pady=10)

        self.entry = tk.Entry(root, width=30, show="*", font=("Helvetica", 12))
        self.entry.pack(pady=10)

        self.analyze_button = tk.Button(root, text="Analyze Strength", font=("Helvetica", 10, "bold"), bg="#4CAF50", fg="white", command=self.analyze_password)
        self.analyze_button.pack(pady=10)

        self.encrypt_button = tk.Button(root, text="Encrypt Password", font=("Helvetica", 10, "bold"), bg="#008CBA", fg="white", command=self.encrypt_password)
        self.encrypt_button.pack(pady=10)

        self.result_label = tk.Label(root, text="", wraplength=350, font=("Helvetica", 10), bg="#f0f8ff")
        self.result_label.pack(pady=10)

        self.progress = tk.Canvas(root, width=300, height=20, bg="#d3d3d3")
        self.progress.pack(pady=10)
        self.progress_bar = self.progress.create_rectangle(0, 0, 0, 20, fill="#4CAF50")

        self.level_label = tk.Label(root, text="", font=("Helvetica", 10, "italic"), bg="#f0f8ff")
        self.level_label.pack(pady=10)

    def analyze_password(self):
        password = self.entry.get()
        if not password:
            messagebox.showwarning("Input Error", "Password field cannot be empty!")
            return

        score = self.calculate_strength(password)
        strength = "Weak"

        if score >= 80:
            strength = "Strong"
        elif 50 <= score < 80:
            strength = "Moderate"

        self.result_label.config(text=f"Password Strength: {strength} ({score}%)")
        self.level_label.config(text=f"Your password level is: {strength}")
        self.update_progress(score)

    def encrypt_password(self):
        password = self.entry.get()
        if not password:
            messagebox.showwarning("Input Error", "Password field cannot be empty!")
            return

        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        self.result_label.config(text=f"Encrypted Password: {hashed_password}")

    def update_progress(self, score):
        self.progress.coords(self.progress_bar, 0, 0, 3 * score, 20)

    @staticmethod
    def calculate_strength(password):
        score = 0

        # Length
        if len(password) >= 8:
            score += 25

        # Mix of letters (uppercase and lowercase)
        if re.search(r'[a-z]', password) and re.search(r'[A-Z]', password):
            score += 25

        # Numbers
        if re.search(r'[0-9]', password):
            score += 20

        # Special characters
        if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
            score += 20

        # Deduction for common patterns
        if re.search(r'(.)\1{2,}', password):
            score -= 10

        return max(0, min(100, score))

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordAnalyzer(root)
    root.mainloop()

